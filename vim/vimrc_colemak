" .vimrc

set nocompatible        " make Vim behave in a more useful way, colemak.vim
set nostartofline       " keep cursor in the same column if possible, colemak.vim
set virtualedit=block   " allow virtual editing in Visual block mode
set whichwrap+=<,>,[,],h,l  " allow cursor to wrap between line, colemak.vim
set scrolloff=1         " minimal number of screen lines to keep outside cursor
set backspace=indent,eol,start "allow backspace over everything, colemak.vim
set dir=~/.vim/swap     " keep swap files in one place
set bdir=~/.vim/backup  " keep backups in one place
syntax on               " enable syntax highlighting
set number              " show line numbers
set numberwidth=1       " minimum num of cols to reserve for line numbers
set nobackup            " disable backup files (filename~)
set textwidth=80        " insert carriage return after n cols wide
set expandtab           " insert spaces instead of tabs
set tabstop=2           " n space tab width
set expandtab           " insert spaces instead of tabs
filetype indent on      " indent by filetype
filetype plugin on
set autoindent          " auto indenting always on
set shiftwidth=2        " autoindent size
set showcmd
colorscheme chad        " colorscheme
set wildmode=longest,full " completion for :e
set wildmenu              " completion for :e
set dictionary+=/usr/share/dict/cracklib-small " dictionary completion

" on search
se nohls
set ignorecase 
set smartcase

" enable omnicomplete
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete

" OmniCppComplete
autocmd FileType cpp set tags+=~/.vim/tags/cpp
set completeopt=menuone,menu,longest
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 0 " autocomplete after .
let OmniCpp_MayCompleteArrow = 0 " autocomplete after ->
let OmniCpp_MayCompleteScope = 0 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std"]
" automatically open and close the popup menu / preview window
" au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
" build tags of your own project with Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" ledger stuff
au BufNewFile,BufRead *.ldg,*.ledger setf ledger | comp ledger
let g:ledger_maxwidth = 80
let g:ledger_fillstring = '      --      '
let g:ledger_detailed_first = 1
let g:ledger_highest_level_match = 1
set viminfo='10,\"100,:20,%,n~/.viminfo

" nerd commenter options
let NERDSpaceDelims=1
map gn <plug>NERDCommenterToggle

" completion menu
" set completeopt=menuone
" <CR> will simply select the highlighted menu item just as C-Y does
inoremap <expr> <CR> pumvisible() ? "\<c-y>" : "\<c-g>u\<CR>"
" When the autocomplete menu is up, make C-N simulate the "Down" key
inoremap <expr> <C-N> pumvisible() ? "\<lt>c-n>" : "\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"
" Make C-Space bring up the <C-N> completion menu, then simulate C-N C-P to
" remove the longest common text, and finally simlates the "Down" key to keep
" a matched highlight
inoremap <expr> <C-@> pumvisible() ? "\<lt>c-n>" : "\<lt>c-x>\<lt>c-n>\<lt>c-r>=pumvisible() ? \"\\<lt>down>\" : \"\"\<lt>cr>"

" this function if i decide to use it, will complete omnifunc, then dict, then
" nothing
" function! SuperCleverTab()
  " if strpart(getline('.'), 0, col('.') - 1) =~ '^\s*$'
    " return "\<Tab>"
  " else
    " if &omnifunc != ''
      " return "\<C-X>\<C-O>"
    " elseif &dictionary != ''
      " return "\<C-K>"
    " else
      " return "\<C-N>"
    " endif
  " endif
" endfunction

" inoremap <Tab> <C-R>=SuperCleverTab()<cr>

" turbo navigation, colemak.vim
nnoremap <silent> N hhhhh|vnoremap <silent> N hhhhh
nnoremap <silent> U kkkkk|vnoremap <silent> U kkkkk
nnoremap <silent> E jjjjj|vnoremap <silent> E jjjjj
nnoremap <silent> I lllll|vnoremap <silent> I lllll

" up/down/left/right, colemak.vim
nnoremap n h|vnoremap n h
nnoremap u k|vnoremap u k
nnoremap e j|vnoremap e j
nnoremap i l|vnoremap i l

" home/end of line, colemak.vim
nnoremap <silent> <expr> <C-n> 0
nnoremap <C-i> $

" words forwads/backwards, colemak.vim
nnoremap l b|vnoremap l b
nnoremap y e|vnoremap y w

" Half page up/down, colemak.vim
nnoremap <silent> <expr> <C-u> (winheight(0)/2) . "\<C-u>"
nnoremap <silent> <expr> <C-e> (winheight(0)/2) . "\<C-d>"

" key mapping
nnoremap ; :
vnoremap ; :
" Ctrl-s to save
inoremap <C-s> <esc>:w<cr>
nnoremap <C-s> :w<cr>
inoremap <C-q> <esc>:q<cr>
nnoremap <C-q> :q<cr>
" emacs keys in insert mode
inoremap <C-p> <C-o>k
inoremap <C-n> <C-o>j
inoremap <C-f> <Right>
inoremap <C-b> <Left>
inoremap <C-d> <C-o>x
inoremap <C-e> <C-o>$
inoremap <C-a> <C-o>0

" space, return in normal mode enter spaces, returns
nnoremap <Space> i<Space><Esc><Right>
" below breaks end of line remap
" nnoremap <Tab> i<Tab><Esc><Right>
nnoremap <Return> i<Return><Esc>

" surround.vim remapping
" edited /usr/share/vim/vimfiles/plugin/surround.vim
" use f in visual mode, f'=frame in '

" autoclose.vim remapping
" find bindings in /usr/share/vim/vimfiles/plugin/autoclose.vim
" \a bound to toggle autoclose

" inSert/Replace/append
nnoremap s i|vnoremap s i
nnoremap S I|vnoremap S I
nnoremap a a|vnoremap a a
nnoremap A A|vnoremap A A

" cut/copy/paste
nnoremap x x
nnoremap c y|vnoremap c y
nnoremap cc yy|vnoremap c y
nnoremap p p

" undo/redo
nnoremap Z <C-r>
nnoremap z u

" misc overridden keys must be prefixed with g
nnoremap gz U

" spell check
nnoremap gs z=

" code folding
nnoremap go zo " open fold under cursor
nnoremap gO zO " open all folds under cursor
nnoremap gr zr " decrease the foldlevel by one
nnoremap gm zm " increases the foldlevel by one
nnoremap gR zR " decreases the foldlevel to zero
nnoremap gk zc " "k"lose fold

" Change, w=warp,sWitch?
nnoremap w c|vnoremap w c
nnoremap W C|vnoremap W C

" find/til repeat stuff
nnoremap t t
nnoremap T T
nnoremap b ;
nnoremap B ,

" Search, n=next (find), N=prev (find)
nnoremap k n
nnoremap K N

" tab navigation
nnoremap gtt gt
nnoremap gtn :tabn<CR>
nnoremap gtp :tabp<CR>
nnoremap gtc :tabnew<CR>
nnoremap gtd :tabclose<CR>
nnoremap gt1 :tabn 1<CR>
nnoremap gt2 :tabn 2<CR>
nnoremap gt3 :tabn 3<CR>
nnoremap gt4 :tabn 4<CR>
nnoremap gt5 :tabn 5<CR>
nnoremap gt6 :tabn 6<CR>
nnoremap gt7 :tabn 7<CR>
nnoremap gt8 :tabn 8<CR>
nnoremap gt9 :tabn 9<CR>

" F5 removes trailing white space from file
nnoremap <silent> <F5> :let _s=@/<Bar>:%s/\s\+$//e<bar>:let @/=_s<bar>:nohl<cr>

" gu underlines
nnoremap gu- yyp<c-v>$r-
nnoremap gu= yyp<c-v>$r=
nnoremap gl- o<Esc>80i-<Esc> 
nnoremap gl= o<Esc>80i=<Esc> 

" Calculator, fully working now!
function NewCalc(str)
  return system("echo -e `calc 'config(\"display\", 2),; config(\"tilde\", 0),; config(\"tab\", \"off\"),; " . a:str ."'`\"\\c\"")
endfunction
command! -nargs=+ NewCalc :echo NewCalc("<args>")

map <silent> gc<space> :s/.*/\=NewCalc(submatch(0))/<CR>:noh<CR>
vnoremap <silent> gc<space> :s/\%V.*\%V/\=NewCalc(submatch(0))/<CR>:noh<CR>
map <silent> gc= :s/.*/\=submatch(0) . "=" . NewCalc(submatch(0))/<CR>:noh<CR>
vnoremap <silent> gc= :s/\%V.*\%V/\=submatch(0) . "=" . NewCalc(submatch(0))/<CR>:noh<CR>
